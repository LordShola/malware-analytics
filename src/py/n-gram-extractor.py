import collections
import glob
from nltk import ngrams
from malwareEncoder import MalwareEncoder
from malware import Malware
from gram import Gram
from ngram import Ngram
import os.path
# import threading
# import logging
import sqlite3


def main():
    # fill in your preferred configuration.
    # the dirrectory where you store the files you wish to analyse
    dir = r"D:\git\malware-analytics\sample malware"
    fileExtension = r"bytes"  # The file extension.
    n = 6
    # The path where you wish to store the database file.
    pathToDatabase = "malware.db3"

    # search for all files in the directory dir with the extension fileExtension
    allfiles = (glob.glob(dir + r"\*." + fileExtension, recursive=False))

    # worker(r"../../sample malware/0A32eTdBKayjCWhZqDOQ.bytes", 6, sqlite3.connect("malware.db3"))

    # create database connection
    con = createDatabase(pathToDatabase)

    # iterate throug all files.
    for file in allfiles:
        worker(file, n, con)
        # t = threading.Thread(name="File: " + str(file),
        #                      target=worker, args=[file, 6, con])
        # t.start()

    # close the connection
    con.close()
    print("finished!")


def createDatabase(databaseName):
    if os.path.exists(databaseName):
        print("Delete existing database file.")
        os.remove(databaseName)

    print("Create new database")
    c = sqlite3.connect(databaseName)

    print("Add table: malware")
    c.execute('''CREATE TABLE malware (
        id INTEGER,
        name INTEGER,
        PRIMARY KEY(id AUTOINCREMENT))''')

    print("Add table: ngram")
    c.execute('''CREATE TABLE ngram (
        id INTEGER,
        n INTEGER,
        malwareId INTEGER,
        PRIMARY KEY(id AUTOINCREMENT),
        FOREIGN KEY("malwareId") REFERENCES "malware"("id"))''')

    print("Add table: gram")
    c.execute('''CREATE TABLE "gram" (
        "id"	INTEGER,
        "tokens" TEXT,
        "count"	INTEGER,
        "probability"	REAL,
        "probabilityWithoutMostCommon"	REAL,
        "ngramId"	INTEGER,
        PRIMARY KEY("id" AUTOINCREMENT),
        FOREIGN KEY("ngramId") REFERENCES "ngram"("id")
        )''')

    # conn.execute('''CREATE TABLE "token" (
    #     "id"	INTEGER,
    #     "token"	TEXT,
    #     "gramId"	INTEGER,
    #     FOREIGN KEY("gramId") REFERENCES "gram"("id"),
    #     PRIMARY KEY("id" AUTOINCREMENT)
    #     )''')

    return c


def worker(fileName, n, conn):
    cur = conn.cursor()
    malwareName = (fileName.split('\\')[-1]).split(".")[0]

    print("Insert a new malware '{}'.".format(malwareName))
    cur.execute('''INSERT INTO malware (name) VALUES (?)''', [malwareName])
    conn.commit()
    malwareId = cur.lastrowid

    print("Filter the file: '{}' and generate a list of all tokens.".format(fileName))
    tokens = []
    with open(fileName) as lines:
        for line in lines:
            var = line.split()
            tokens.extend(filter(lambda x: len(x) != 8, var))

    for i in range(1, (n + 1)):
        print("Search for all {}-grams in the list of tokens".format(i))

        # add a new n gram into the database
        cur.execute(
            '''INSERT INTO ngram (n, malwareId) VALUES (?,?)''', [i, malwareId])
        conn.commit()
        ngramId = cur.lastrowid

        # generate n grams 
        grams = ngrams(tokens, i)

        # Thhis will create (('00', '00'), 29667)
        countedGrams = collections.Counter(grams).most_common()

        # delete all n-grams which will occure only one time.
        filteredGrams = list(filter(lambda x: x[1] > 1, countedGrams))

        # calculate sum of all grams in the whole file
        sumOfGrams = sum([y[1] for y in filteredGrams])

        # generate a list of tupels which ca be inserted into the database
        rows = list([(x[1], " ".join(x[0]), x[1] / sumOfGrams, ngramId)
                     for x in filteredGrams])
        
        # insert all grams into the database
        cur.executemany(
            '''INSERT INTO gram (count,tokens,probability,ngramId) VALUES (?,?,?,?);''', rows)
        conn.commit()

        print("For the malware {}, {} {}-grams has been added to the database.".format(malwareName, cur.rowcount, i))


# def DetectAndWriteMalware(gramsI):
#     # Ngram: contains n for the length of the first tupel and gramps for the value. Ngram (n, List[Gram])
#     # Example: object = new Ngram (2, (('CC', 'CC'), 218684)
#     #         (('00', '00'), 29667)
#     #         (('??', '??'), 10793) )
#     #Gram: (('CC', 'CC'), 218684) + probability
#     # all n-grams
#     ngram = Ngram(None, None)
#     for x in allfiles:
#         fileName = x.split('.')[0] + '.json'
#         if not os.path.isfile(fileName):
#             file = open(fileName, "x")

#         for p in range(2, (gramsI+1)):  # geh von 1 bis 6(gramsI) durch
#             ngram.n = p
#             f = open(x, "r")
#             grams = ngrams(f.read().split(), p)
#             # das erzeugt  (('00', '00'), 29667)
#             gramsCounter = collections.Counter(grams)

#             filterList = list(filter(lambda x: len(
#                 x[0][0]) != 8 or x[1] != 1, gramsCounter.most_common()))
#             # for gramsi in gramsCounter:
#             #   if len(gramsi[0][0]) != 8 or gramsi[1] != 1:
#             #     filterListNew.append(gramsi)
#             grams2 = [Gram(x[0], x[1], None, None) for x in filterList]
#             ngram.grams = grams2
#             # calculate sum of all grams in the whole file
#             summe = sum([y[1] for y in filterList])

#             # calculate the Probabilty of each gram
#             listOfProbability = [x[1]/summe for x in filterList]
#             for i in range(len(ngram.grams)):
#                 ngram.grams[i].probability = listOfProbability[i]
#             print(ngram.grams[0])
#             malware = Malware('Malware_' + str(p), ngram, None)
#             file = open(fileName, "w")
#             malwarEncoder = MalwareEncoder()
#             file.write(malwarEncoder.encode(malware))
#             file.close()
#         # for grams in gramsCounter.most_common():
#         #   if len(grams[0][0]) < 8 or grams[1] != 1:
#         #     a.append(grams[-1])
#         #     print(grams)
#         #     summ = sum(a)
#         # for c in a:
#         #     perc = c/summ * 100
#         #     percent.append(perc)


# DetectAndWriteMalware(4)

if __name__ == "__main__":
    main()